Get-FileHash -Algorithm SHA1 -Path C:\Users\...\...\ovf
-----------------------------------------------------------------------
[PROGRAMY DO BUDOWY]
1. live-build
2. http://www.linuxrespin.org/
3. https://jm.iq.pl/yosild-moja-twoja-dystrybucja-linuxa/
4. https://www.linux-live.org/

[BUDOWANIE WŁASNEGO OBRAZU LINUX]
https://manpages.debian.org/stretch/live-build/live-build.7.en.html
#Instalacja narzędzia do budowy obrazu linux
apt install live-build -y
#Konfiguracja narzędzia do budowy obrazu linux

lb config --apt apt 
			--binary-filesystem ext4 -s iso 
			--cache true 
			--apt-recommends true -a amd64 
			--binary-images iso-hybrid 
			--debian-installer live 
			--linux-flavours amd64 
			--mode debian 
			--debian-installer-gui true 
			--archive-areas "main contrib non-free" 
			--security true 
			--interactive shell 
			--updates true 
			--iso-application "NAZWA TWOJEGO LINUXA" 
			--iso-preparer "NAZWA TWOJEGO LINUXA"
			--apt-http-proxy http://10.20.0.2:3128
			
#Kompilacja obrazu
lb build
#Instalacja aplikacji po przejściu do trybu chroot

"lb chroot_interactive
P: Begin interactive build...
P:Pausing build: starting interactive shell...
mesg: ttyname failed: Success
(live)root@linux:/#"

apt install "wybrana paczka"
#Budowane obrazu
exit
"live-image-amd64.hybrid.iso"
#Czyszczenie po pobraniu obrazu LINUX
lb clean --purge

#Tłumaczenia parametrów konfiguracji:
--apt parametr ten określa nam z jakiego menadżera pakietów będziemy korzystać, ja wybrałem apt jednak do wyboru mamy jeszcze aptitude
--binary-filesystem definuije nam jaki system plików będzie używał nasz obraz systemu. Ext4 jest domyślnie rekomendowany ale do wyboru mamy jeszcze fat16, fat32, ext2 czy ext3
-s dzięki temu parametrowi jesteśmy wstanie zdefiniować typ obrazu. Domyślnie jest nim tar więc jeżeli od razu chcemy mieć czysty plik iso to warto uwzględnić tę konfiguracje
--cache opcja ta umożliwia przy parametrze true zbieranie cache’a dla wszystkich operacji. Przydatna opcja do doglębnej konfiguracji
--apt-recommends w tym miejscu jesteśmy w stanie zdefiniować czy podstawowe pakiety apt powinny zostać automatycznie zainstalowane. Ja rekomenduje opcję true podobnie jak i dokumentacja live-build’a
-a parametr ten definiuje architekturę naszego procesora. W moim przypadku jest to architektura typu amd64
--binary-images definiuje typ naszego obrazu. Do wyboru mamy tutaj iso, iso-hybrid, netboot, tar i hdd. Ja zdecydowałem się na iso-hybrid, ponieważ jest to najbardziej uniwersalną opcją w moim przypadku zakładając tworzenie pliku ISO
--debian-installer opcja ta definiuje nam jaki typ pakietu Debiana ma być zawarty w naszym systemie. Do wyboru mamy true, cdrom, netinst, netboot, businesscard, live i false. Domyślnie ta opcja jest wylączona, jednak ja zdecydowałem się na pakiet live, który według mnie jest przydatny do późniejszych testów
--linux-flavours tutaj mamy do czynienia po prostu z notatką dla kernela (jądra systemowego) z informacją o wybranej architekturze. W moim przypadku amd64
--mode definicja dystrybucji na podstawie której budujemy nasz system
--debian-installer-gui opcja ta decyduje o tym czy obraz systemu ma zwierać graficzną instalację
--archive-areas notatka zawierająca informacje o typie pakietów Debiana
--security opcja dotycząca bezpieczeństwa repozytoriów
--interactive shell to opcja, która umożliwi nam konfigurację systemu z poziomu konsolowego chroot’a przed utworzeniem pliku iso. Jest ona o tyle ważna, że przede wszystkim dzięki niej będziemy modyfikować i konfigurować nasz system
--updates opcja umożliwiająca auto-aktualizację pakietów podczas instalacji systemu. Polecam odpalić, tak by nasz system był aktualny niezależnie od częstotliwości zmian jakie dokonujemy na obrazie systemowym
--iso-application i –iso-preparer to definicje nazw twojej przyszłej dystrybucji
------------------------------------------
[Lokazlizacja instalacji paczek apt]
  W pliku /etc/apt/apt.conf
  Dir{Cache /media/cache}
  Dir::Cache /media/cache/;

[Sprawdzanie parametrów serwera]
  dmidecode -t memory

[Wyłączanie ipv6]
  sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sysctl -w net.ipv6.conf.default.disable_ipv6=1

[Konfiguracja proxy]
  /etc/apt/apt.conf
  Acquire::http::Proxy "http://192.168.0.1:3128";
  Acquire::https::Proxy "http://192.168.0.1:3128";

  /etc/profile.d/proxy.sh
  export http_proxy=http://192.168.0.1:3128

  /etc/apt/apt.conf.d/99HttpProxy
  Acquire::http::Proxy "http://192.168.0.1:3128";

  /etc/wgetrc
  http_proxy = http://192.168.0.1:3128

  git config --global http.proxy http://x.x.x.x:xxxx

[Wyszukiwanie najwięszych plików LINUX]
  Wyszukiwanie 10 największych katalogów
  du -a | sort -n -r|head -n 10

  Wyszukiwanie 10 największych plików
  ls -lSh|head -n 10

  Wyszukiwanie 10 największych plików we wskazanej lokalizacji (np. opt) przy użyciu find
  find /opt -type f -ls | sort -r -n -k 7 | head -n 10

[Weryfikacja czy system jest zainstalowany na maszynie wirtualnej czy fizycznej]
[VMware Workstation]
# dmidecode -s system-manufacturer
VMware, Inc.

# dmidecode -s system-product-name
VMware Virtual Platform

[VirtualBox]
$ sudo dmidecode -s system-product-name
VirtualBox

[OpenStack]
$ sudo dmidecode -s system-product-name
OpenStack Nova

[Physical Server]
# dmidecode -s system-manufacturer
IBM

# dmidecode -s system-product-name

[Sortowanie ilości wystąpień adresu IP w pliku]
sort ips.txt | uniq -c | sort -bgr >> ips2.txt

grep -o -E [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(:[0-9]+)? ips.txt > ips2.txt

[Zliczanie ilości unikalnych adresów z pliku]
$ awk '{ print $1 } ' log.txt | sort | uniq | wc -l

[Przeliczanie czasu EPOCH]
cat NAZWA_PLIKU | sed 's/e+09//g' | cut -c1,3-11,18- | sed 's/^/echo "/; s/\([0-9]\{10\}\)/`date -d @\1`/; s/$/"/' | bash >> NAZWA_PLIKU_2

[XRDP - do połączeń przez RDP Windows]
sudo apt update
sudo apt install -y xrdp tigervnc-standalone-server

Następnie uruchamiamy usługę xrdp oraz dodajemy ją do uruchomienia przy starcie:

sudo systemctl start xrdp
sudo systemctl enable  xrdp

Jeśli używasz ufw to musimy odblokować port TCP 3389:

sudo ufw allow 3389/tcp

[Wymuszenie HTTPS]
Ustawić w pliku /etc/apache2/sites-enabled/000-default.conf

RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</VirtualHost>

[Dodanie 2 bram sieci]

auto eth0
iface eth0 inet static
    address 10.1.248.11
    netmask 255.255.255.0
    up ip route add default via xxx.1.xxx.1 dev eth0  metric 100 
    up ip route add default via xxx.1.xxx.3 dev eth0  metric 200

[CERTYFIKAT SSL APACHE]
#WERYFIKACJA ŚCIEŻKI I NAZWY CERTTYFIKATÓW
cat /etc/apache2/sites-available/default-ssl.conf
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
----------------------------------------------------------------------------------------
[Sprawdzanie podatności ssl-poodle]
  nmap -sV --version-light --script ssl-poodle -p 433 <host>

[Skanowanie określonego portu z listy adresów z zapisem do pliku]
  nmap -sT -A -v -T4 -p <port> -iL <ściżka_do_pliku_z_adresami> -oA <plik_wyjściowy>

[Skanowanie typu "save"]
  nmap --scritp default,save -iL <ściżka_do_pliku_z_adresami> -oA <plik_wyjściowy>

[DISCOVER]
netdiscover -r ADDRESS_IP/MASK - wyszukuje hosty w sieci

[DIRB]
dirb ADDRESS_IP - sprawdzanie ukrytych katalogów na danym adresie

[NMAP]
nmap --top-ports 2000 -T5 ADDRESS_IP -skanowanie 2000 najpopularniejszych portów dla hostów
nmap -p80 --script http-brute ADDRESS_IP --script-args http-brute.path=/PATH/ - łamanie hasła dla określonej ścieżki
nmap -p80 --script http-brute --script-args \
> http-brute.path=/PATH/, \
> userdb=./USERS_LIST, \
> passdb-./PASS_LIST ADDRESS_IP - łamanie hasła z podaniem plików użytkowników i haseł

nmap -p80 --script http-form-brute --script-args http-form-brute.path=PATH,userdb=USERS_LIST,brute.firstonly=1,passdb=./PASS_LIST ADDRESS_IP - dla określonego parametru form
nmap -p80 --script http-wordpress-brute --script-args http-wordpress-brute.threads=10,http-wordpress-brute.uri=/PATH/,userdb=USERS_LIST,passdb=./PASS_LIST ADDRESS_IP - łamanie haseł WORDPRESS

cewl -d 3 -m 6 -w cewl.txt ADDRESS_IP - generowanie listy haseł
john –wordlist=cewl.txt –rules=TryHarder –stdout > cewlmangled.txt - permutacja listy haseł
nmap -p80 --script http-wordpress-brute --script-args http-wordpress-brute.threads=20,http-wordpress-brute.uri=/PATH/,userdb=users.txt,passdb=cewlmangled.txt,brute.firstonly ADDRESS_IP - łamanie haseł przy pomocy wygenerowanej listy
nmap -p21 --script ftp-brute --script-args ftp-brute.timeout=3s,userdb=ftpusers.txt ADDRESS_IP - łamanie haseł FTP
nmap -p3306 --script mysql-brute localhost - łamanie haseł MYSQL
nmap -p22 --script ssh-brute --script-args brute.firstonly ADDRESS_IP - łamanie haseł SSH
nmap -p139,445 --script smb-brute ADDRESS_IP --script-args userdb=./USERS_LIST,passdb=./PASS_LIST - łamanie haseł SAMBA
nmap -p110 --script pop3-brute --script-args brute.firstonly,userdb=users.txt ADDRESS_IP - łamanie haseł POP3
nmap -p143 --script imap-brute --script-args brute.firstonly,userdb=users.txt ADDRESS_IP - łamanie haseł IMAP

[Enumeracja katalogów/plików]
nmap --script http-enum host

(w konkretnym katalogu)
nmap --script -http-enum --script-args http-enum.basepath='pub/' host

[HTTP TITLE (informacje o stronie)]
nmap --script http-title -sV -p 80 192.168.1.0/24

[Przeszukiwanie informacji o stronie]

nmap -p80 --script http-grep \ --script-args http-grep.url="contact.html" host

[Poszukiwanie backupów strony]
nmap -n -p80 --script http-config-backup host

[Skaner podatności]
nmap -sV p80 --script vuln host

(Wyświetla tabelke zawierającą ID i link do podatności)
nmap -sV --script vulscan/vulscan --script-args vulscanoutput='{id}\t{link}'

[Skanowania zaawansowane]
https://github.com/wuseman/WNMAP

[Wyjście NMAP]
Formaty wyjściowe Nmapa

-oN <nazwapliku> (Format normalny)
Powoduje zapis w formacie normalnym do wskazanego pliku. Jak napisano wyżej, format ten różni się nieco od formatu interaktywnego.

-oX <nazwapliku> (Format XML)
Powoduje zapis w formacie XML do wskazanego pliku. Nmap dołącza definicje formatu dokumentu (DTD), który pozwala innym programom na weryfikację zawartości tego pliku. Funkcja ta jest głównie przeznaczona do wykorzystania przez oprogramowanie dodatkowe, jednak może pomóc w ręcznej analizie zawartych danych. DTD opisuje jakie elementy XML mogą być legalnie uzywane w pliku i często podaje jakie wartości mogą przyjmować poszczególne znaczniki. Zawsze aktualna DTD wersja jest dostępna pod adresem https://nmap.org/data/nmap.dtd.

XML jest stabilnym formatem, który może być łatwo przetwarzany przez inne programy. Darmowe biblioteki do przetwarzania XML są dostępne dla większości języków programowania, takich jak C/C++, Perl, Python czy Java. Napisano nawet wiele procedur dostosowanych specjalnie do potrzeb Nmapa. Przykładami są Nmap::Scanner i Nmap::Parser dla Perla (CPAN). W wiekszości dużych aplikacji korzystających z Nmapa preferowany jest właśnie format XML.

W formacie XML jest również opisany styl XSL, który może zostać wykorzystany do konwersji do HTML. Najprostrzym sposobem jest po prostu wczytanie pliku XML do przeglądarki internetowej, takiej jak Firefox czy IE. Domyślnie zadziała to tylko na komputerze na którym był uruchamiany Nmap (lub skonfigurowanym podobnie), z powodu umieszczenia ścieżki do pliku nmap.xsl właściwej dla danego systemu. Za pomocą opcji --webxml lub --stylesheet można utworzyć przenośny raport XML, możliwy do obejrzenia w formacie HTML na każdym komputerze podłączonym do Internetu.

-oS <nazwapliku> (Format ScRipT KIdd|3)
Format script kiddie jest podobny do interaktywnego, jednak jest dodatkowo przetworzony na potrzeby l33t HaXXorZ, którzy nie byli zadowoleni z domyślnego, uporządkowanego formatu Nmapa. Osoby bez poczucia humoru powinny wiedzieć przed zarzucaniem mi „pomagania script kiddies ”, że opcja ta jest tylko żartem, a nie pomocą.

-oG <nazwapliku> (Format "grepowalny")
Ten format został opisany jako ostatni, jako że jest już przestarzały. Format XML jest dużo lepszy i jest prawie tak samo wygodny dla zaawansowanych użytkowników. XML jest standardem, do którego napisano dziesiątki bibliotek, podczas gdy format grepowalny jest moim osobistym wymysłem. XML pozwala również na łatwe rozszerzanie o nowe funkcje Nmapa w miarę ich dodawania, podczas gdy w formacie grepowalnym muszą one być pomijane z powodu braku miejsca.

Niezależnie od tego, format ten jest nadal całkiem popularny. Jest prostym formatem opisującym każdy host w oddzielnej linii i umożliwiający bardzo proste wyszukiwanie i przetwarzanie za pomocą standardowych narzędzi systemów UNIX takich jak grep, awk, cut, sed, diff i Perl. Format ten jest wygodny do szybkiego odnajdywania potrzebnych danych, na przykład hostów z otwartym portem SSH lub używających systemu Solaris i jest to możliwe za pomocą wycinania interesujących informacji za pomocą prostych poleceń awk czy cut.

Format grepowalny składa sie z linii komentarzy (rozpoczynających się od znaku #) i linii wyników. Linia wyników składa się z sześciu pól, oddzielonych znakami tabulacji i przecinkami. Polami tymi są Host, Ports, Protocols, Ignored State, OS, Seq Index, IPID i Status.

Najważniejszymi z tych pól są najczęściej pola Ports, które zawierają informacje o interesujących portach, w postaci listy oddzielonej przecinkami. Każda pozycja na liście reprezentuje jeden otwarty port i opisuje go siedmioma, oddzielonymi znakami (/) subpolami: Port number, State, Protocol, Owner, Service, SunRPC info i Version info.

Tak jak i w przypadku formaty XML, dokładny opis formatu grepowalnego przekracza zakres tej dokumentacji i jest dostępny pod adresem http://www.unspecific.com/nmap-oG-output.

-oA <nazwa> (Wyjście we wszystkich formatach)
Dla wygody można podać opcję -oA<nazwa> do zapisywania wyników w formacie normalnym, XML i grepowalnym równocześnie. Wyniki zostaną zapisane odpowiednio w plikach o nazwach <nazwa>.nmap, <nazwa>.xml i <nazwa>.gnmap. Tak jak i w przypadku innych programów, nazwa może zostać poprzedzona scieżką, na przykład ~/nmaplogs/foocorp/ w systemach UNIX lub c:\hacking\sco pod Windows.

[XML na HTML]
xsltproc <nmap-output.xml> -o <nmap-output.html>
-----------------------------------------------------------------------------------------------------------------------------
[LINUX KERNEL COMPILE]

# Pobranie kernela i PGP
wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.x.x.tar.xz
wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.x.x.tar.sign

# Kernel - rozpakowanie (xz)
unxz -v linux-5.x.x.tar.xz

# Weryfikacja PGP
 gpg --verify linux-5.x.x.tar.sign
 gpg --recv-keys 79BE3E4300411886
 
# Kernel - rozpakowywanie
tar xvf linux-5.x.x.tar (tar)

# Konfiguracja kernela
cd linux-5.x.x
cp -v /boot/config-$(uname -r) .config

# Instalacja potrzebnych paczek do kompilacji
apt install build-essential libncurses-dev bison flex libssl-dev libelf-dev

# Konfiguracja kernela
make menuconfig

# Kompilacja z wykorzystaniem procesorów
make -j $(nproc)

# Instalacja modułów kernela
make modules_install

# Instalacja kernela
make install

# Aktualizacja grub
update-initramfs -c -k 5.x.x
update-grub
reboot

# Weryfikacja wersji

uname -mrs

# Czyszczenie ze starych wersji kernela
dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'`uname -r`'/q;p' | xargs sudo apt-get -y purge

dpkg –list lista pakietów w systemie
grep linux-image pokaż wyłącznie obrazy Linux czyli Kernele
awk ‘{ print $2 }’ Pokazuj wyłącznie drugą kolumne (numer kernela)
sort -V sortuj wyłącznie po wersji
sed -n ‘/’`uname -r`’/q;p’ wyświetl wyłącznie linie poza używanym kernelem
xargs sudo apt-get -y purge usuń stare kernele
--------------------------------------------------------------------------------------------
